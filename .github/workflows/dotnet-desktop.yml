name: mpvnet build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - ci
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - '.gitattributes'
      - 'docs/**'
      - '.github/**'
      - 'src/Extensions/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - '.gitattributes'
      - 'docs/**'
      - '.github/**'
      - 'src/Extensions/**'

jobs:
  windows:
    name: Windows build
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup MSYS2 and install tools
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >
            base-devel
            wget
            p7zip

      - name: Restore NuGet packages
        shell: cmd
        run: |
          cd src
          nuget restore
        working-directory: src

      - name: Build Solution (Debug)
        shell: cmd
        run: |
          msbuild MpvNet.sln /m /p:Configuration=Debug /p:Platform="Any CPU"
        working-directory: src

      - name: Install Gettext.Tools for .mo file generation
        shell: pwsh
        run: |
          # Download nuget.exe if not exists
          if (-not (Test-Path "nuget.exe")) {
            Write-Host "Downloading nuget.exe..."
            Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile "nuget.exe"
          }

          # Ensure tools directory exists
          if (-not (Test-Path "tools")) {
            New-Item -ItemType Directory -Path "tools" | Out-Null
          }

          # Install Gettext.Tools
          Write-Host "Installing Gettext.Tools..."
          .\nuget.exe install Gettext.Tools -OutputDirectory ./tools -ExcludeVersion -NonInteractive

          # Add msgfmt to PATH
          $msgfmtPath = "$PWD\tools\Gettext.Tools\tools\bin"
          if (Test-Path $msgfmtPath) {
            $env:Path = "$msgfmtPath;$env:Path"
            Write-Host "msgfmt path added to PATH: $msgfmtPath"
          } else {
            Write-Error "msgfmt not found in $msgfmtPath"
            exit 1
          }

          # Verify msgfmt is available
          msgfmt --version

      - name: Generate .mo files for localization
        shell: pwsh
        run: |
          if (Test-Path "lang/create-mo-files.ps1") {
            Write-Host "Running create-mo-files.ps1..."
            .\lang\create-mo-files.ps1
          } else {
            Write-Warning "lang/create-mo-files.ps1 not found. Skipping localization."
          }

      - name: Download libmpv
        shell: msys2 {0}
        run: |
          wget -nv -O libmpv.7z https://github.com/zhongfly/mpv-winbuild/releases/download/2025-05-03-e663cbc/mpv-dev-x86_64-20250503-git-e663cbc.7z
          7z x -y libmpv.7z -olibmpv
          cp -f libmpv/libmpv-2.dll src/MpvNet.Windows/bin/Debug/libmpv-2.dll || echo "libmpv copy skipped or failed"

      - name: Download MediaInfo
        shell: msys2 {0}
        run: |
          wget -nv -O MediaInfo.7z https://mediaarea.net/download/binary/libmediainfo0/24.03/MediaInfo_DLL_24.03_Windows_x64_WithoutInstaller.7z
          7z x -y MediaInfo.7z -oMediaInfo
          cp -f MediaInfo/MediaInfo.dll src/MpvNet.Windows/bin/Debug/MediaInfo.dll || echo "MediaInfo copy skipped or failed"

      - name: Download mpvnet.com
        shell: msys2 {0}
        run: |
          wget -nv -O mpvnet.com https://github.com/mpvnet-player/file-host/releases/download/tag/mpvnet.com.txt
          cp -f mpvnet.com src/MpvNet.Windows/bin/Debug/mpvnet.com || echo "mpvnet.com copy skipped or failed"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpv.net-win64
          path: src/MpvNet.Windows/bin/Debug/
          if-no-files-found: warn
